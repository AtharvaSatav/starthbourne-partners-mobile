apply plugin: "com.android.application"

/**
 * This is the configuration block to customize your React Native Android app.
 */
def reactNativeRoot = file("../")
def reactNativeDir = file("../node_modules/react-native")

// Only apply React Native plugin if the directory exists
if (reactNativeDir.exists()) {
    apply plugin: "com.facebook.react"
    
    react {
        /* Folders */
        root = reactNativeRoot
        reactNativeDir = reactNativeDir
        
        /* Variants */
        //   The list of variants to that you want to upload
        // uploadList = ["release", "debug"]
        
        /* Bundle Config */
        //   A list of extra flags to pass to the 'bundle' commands.
        //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
        // extraPackagerArgs = []
        
        /* Hermes Commands */
        //   The hermes command to run. By default it is 'hermesc'
        // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
        //
        //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
        // hermesFlags = ["-O", "-output-source-map"]
    }
}

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = true

android {
    namespace "com.beepstream.mobile"
    compileSdk 34
    
    defaultConfig {
        applicationId "com.beepstream.mobile"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            debuggable true
            // Use React Native Application in debug mode
            manifestPlaceholders = [applicationClass: ".MainApplication"]
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // Check if CI environment to determine which Application to use
            def isCI = System.getenv("CI") == "true"
            manifestPlaceholders = [applicationClass: isCI ? ".NativeMainApplication" : ".MainApplication"]
            // Note: No signing config = unsigned APK (perfectly valid for CI builds)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    // Conditionally exclude React Native files in CI mode
    def isCI = System.getenv("CI") == "true"
    if (isCI) {
        sourceSets {
            main {
                java {
                    exclude '**/MainApplication.java'
                    exclude '**/MainActivity.java'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    
    // Core Android dependencies
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core:1.10.1'
    implementation 'androidx.activity:activity:1.7.2'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    
    // Native Android implementation with WebView fallback
    implementation 'androidx.webkit:webkit:1.7.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // React Native dependencies - only if React Native exists and not in CI
    def isCI = System.getenv("CI") == "true"
    if (reactNativeDir.exists() && !isCI) {
        //noinspection GradleDynamicVersion
        implementation "com.facebook.react:react-native:+"
        
        if (enableHermes) {
            //noinspection GradleDynamicVersion
            implementation("com.facebook.react:hermes-engine:+") {
                exclude group:'com.facebook.fbjni'
            }
        } else {
            implementation jscFlavor
        }
    }
}

// Apply React Native auto-linking only if React Native CLI exists
def nativeModulesPath = "$reactNativeRoot/node_modules/@react-native-community/cli-platform-android/native_modules.gradle"
if (file(nativeModulesPath).exists()) {
    apply from: nativeModulesPath
    applyNativeModulesAppBuildGradle(project)
}