name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install mobile dependencies (skip in CI for pure native build)
      working-directory: ./mobile
      run: |
        echo "=== Skipping npm install in CI mode for pure native build ==="
        echo "This avoids React Native dependency conflicts in CI environment"
        # Create minimal package structure for CI
        mkdir -p node_modules

    - name: Prepare pure native Android build (CI mode)
      run: |
        echo "=== Preparing pure native Android APK build ==="
        
        # Clean Gradle cache completely
        rm -rf ~/.gradle/caches/
        rm -rf ~/.gradle/daemon/
        
        # Remove entire node_modules to ensure no React Native interference
        rm -rf mobile/node_modules/
        
        # Create minimal directory structure
        mkdir -p mobile/node_modules
        
        # Set CI environment variable for pure native build mode
        echo "CI=true" >> $GITHUB_ENV
        echo "=== Ready for pure native Android build ==="

    - name: Make Gradlew executable
      working-directory: ./mobile/android
      run: chmod +x ./gradlew

    - name: Build Android APK with clean
      working-directory: ./mobile/android
      run: |
        echo "=== CI Environment Variables ==="
        echo "CI: $CI"
        echo "GITHUB_ENV: $GITHUB_ENV"
        echo "=== Building unsigned APK in CI mode ==="
        ./gradlew clean assembleRelease --no-daemon --stacktrace --refresh-dependencies

    - name: Debug APK output location
      run: |
        echo "=== Searching for generated APK files ==="
        find mobile/android -name "*.apk" -type f | head -10
        echo "=== Checking build outputs directory ==="
        ls -la mobile/android/app/build/outputs/ || echo "outputs directory not found"
        ls -la mobile/android/app/build/outputs/apk/ || echo "apk directory not found"
        ls -la mobile/android/app/build/outputs/apk/release/ || echo "release directory not found"
        echo "=== APK file details ==="
        find mobile/android/app/build/outputs -name "*.apk" -exec ls -la {} \;
        echo "=== Expected APK names (unsigned) ==="
        ls -la mobile/android/app/build/outputs/apk/release/*unsigned*.apk || echo "No unsigned APK found"
        ls -la mobile/android/app/build/outputs/apk/release/app-release*.apk || echo "No app-release APK found"
        
    - name: Validate APK integrity
      run: |
        echo "=== Validating APK integrity ==="
        APK_PATH=$(find mobile/android/app/build/outputs/apk/release -name "*.apk" | head -1)
        if [ -f "$APK_PATH" ]; then
          echo "Found APK: $APK_PATH"
          echo "APK Size: $(du -h "$APK_PATH" | cut -f1)"
          echo "APK Details:"
          file "$APK_PATH"
          # Use aapt to validate APK structure
          $ANDROID_HOME/build-tools/34.0.0/aapt dump badging "$APK_PATH" | head -10 || echo "AAPT validation failed"
        else
          echo "ERROR: No APK file found!"
          exit 1
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: beepstream-android-apk
        path: mobile/android/app/build/outputs/apk/release/*.apk
        retention-days: 30

    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: BeepStream Mobile v${{ github.run_number }}
        body: |
          Automated build of BeepStream mobile app (unsigned APK).
          
          ## Installation Instructions
          1. Download the APK file below
          2. Enable "Unknown sources" in Android settings
          3. Install the APK on your phone
          4. Grant notification and audio permissions when prompted
          
          ## Features
          - Real-time log monitoring with WebSocket connection
          - Background notifications for critical alerts
          - Audio alerts with native alarm sounds
          - Kill switch functionality via WebView bridge
          - Daily archival integration
          - Hybrid native/web architecture
        files: mobile/android/app/build/outputs/apk/release/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}